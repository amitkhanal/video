package com.netflix.video.data;


import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;
import java.util.zip.GZIPInputStream;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;

/**
 * Sample class for downloading name.basics.tsv.gz from the 'current' folder in the
 * imdb-datasets s3 bucket.
 *
 * Use with AWS Java SDK 1.11.156 or later.
 */

public class GetObject {
	private static String bucketName = "imdb-datasets"; 
	//private static String key        = "documents/v1/2017/*";
	private static String key        = "documents/v1/current/title.ratings.tsv.gz";

	public static void main(String[] args) throws IOException, InterruptedException  {
		ProfileCredentialsProvider credentialsProvider =
				new ProfileCredentialsProvider("/Users/amitkhanal/Data/netflix_workspace/netflix_video/netflix_video_data/src/main/java/com/resources/credentials",
						"default");

		AmazonS3 s3Client = AmazonS3ClientBuilder.standard().withRegion(Regions.US_EAST_1).withCredentials(credentialsProvider).build();
		getObjects(s3Client,bucketName);
		//listObjects(s3Client, bucketName);
	}

	private static void getObjects(AmazonS3 s3Client,String bucketName) throws IOException, InterruptedException{
		try {
			// Note: It's necessary to set RequesterPays to true
			GetObjectRequest getObjectRequest = new GetObjectRequest(bucketName, key)
					.withRequesterPays(true);

			System.out.println("Downloading object");

			S3Object s3object = s3Client.getObject(getObjectRequest);

			System.out.println("Content-Type: "  + 
					s3object.getObjectMetadata().getContentType());

			writeFile(s3object.getObjectContent());
		} catch (AmazonServiceException ase) {
			System.out.println("Caught an AmazonServiceException, which" +
					" means your request made it " +
					"to Amazon S3, but was rejected with an error response" +
					" for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());
			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out.println("Caught an AmazonClientException, which means"+
					" the client encountered " +
					"an internal error while trying to " +
					"communicate with S3, " +
					"such as not being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}
	}

	private static void listObjects(AmazonS3 s3Client,String bucketName){
		try {
			System.out.println("Listing objects ****");
			final ListObjectsV2Request req = new ListObjectsV2Request().withBucketName(bucketName).withPrefix(key)
					.withMaxKeys(2).withRequesterPays(true);
			
			ListObjectsV2Result result;
			do {               
				result = s3Client.listObjectsV2(req);
				for (S3ObjectSummary objectSummary : 
					result.getObjectSummaries()) {
					System.out.println(" - " + objectSummary.getKey() + "  " +
							"(size = " + objectSummary.getSize() + 
							")");
				}
				//System.out.println("Next Continuation Token : " + result.getNextContinuationToken());
				req.setContinuationToken(result.getNextContinuationToken());
			} while(result.isTruncated() == true ); 
			System.out.println("Listing objects end ****");
		} catch (AmazonServiceException ase) {
			System.out.println("Caught an AmazonServiceException, " +
					"which means your request made it " +
					"to Amazon S3, but was rejected with an error response " +
					"for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());
			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out.println("Caught an AmazonClientException, " +
					"which means the client encountered " +
					"an internal error while trying to communicate" +
					" with S3, " +
					"such as not being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}
	}
	private static void writeFile(InputStream input) throws IOException, InterruptedException {
		GZIPInputStream gzipInputStream = new GZIPInputStream(input);
		ReadableByteChannel readableByteChannel = Channels.newChannel(gzipInputStream);
		//create buffer with capacity of 48 bytes
		ByteBuffer buf = ByteBuffer.allocate(20480000);

		OutputStream out = new FileOutputStream("ratings-list-uncompressed.txt");
		WritableByteChannel writableByteChannel = Channels.newChannel(out);

		int bytesRead = readableByteChannel.read(buf); //read into buffer.
		while (bytesRead != -1) {
			buf.flip();  //make buffer ready for read
			//while(buf.hasRemaining()){
			writableByteChannel.write(buf); // read 1 byte at a time
			//}
			buf.clear(); //make buffer ready for writing
			bytesRead = readableByteChannel.read(buf);
		}



		/*input.transferTo(0, 1, writableByteChannel);

        byte[] buf = new byte[1024 * 1024];
        OutputStream out = new FileOutputStream("name.basics.tsv.gz");
        int count;
        while ((count = input.read(buf)) != -1) {
            if (Thread.interrupted()) {
                throw new InterruptedException();
            }
            out.write(buf, 0, count);
        }*/
		input.close();
		out.close();
		//readableByteChannel.close();
		//writableByteChannel.close();
		//System.out.println("Available input =" + input.available());
		//System.out.println("Output  =" + out.available());
	}
}
